!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var c,p=[],h=!1,l=-1;function u(){h&&c&&(h=!1,c.length?p=c.concat(p):l=-1,p.length&&d())}function d(){if(!h){var e=s(u);h=!0;for(var t=p.length;t;){for(c=p,p=[];++l<t;)c&&c[l].run();l=-1,t=p.length}c=null,h=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function v(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new f(e,t)),1!==p.length||h||s(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,s,c=1,p={},h=!1,l=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){f(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&f(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}):e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){f(e.data)},i=function(e){o.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(r=l.documentElement,i=function(e){var t=l.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(f,0,e)},u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return p[c]=r,i(c),c++},u.clearImmediate=d}function d(e){delete p[e]}function f(e){if(h)setTimeout(f,0,e);else{var t=p[e];if(t){h=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{d(e),h=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(0),n(1))},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(2),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(e,t,n){(function(t){!function(n){var i=1,r=(new Date).getTime().toString(16).slice(8);function o(){return"_"+r+i++}function a(){}function s(e,t){for(var n in t)if(t.hasOwnProperty(n)){var i=t[n];void 0!==i&&(e[n]=i)}return e}function c(e,t){var n=e.prototype,i=new Function;i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e,s(e.prototype,n)}function p(e,t){if(e&&e.length>0)for(var n=0,i=e.length;n<i&&!1!==t(e[n],n);n++);}function h(e,t){var n=Function.prototype.bind,i=Array.prototype.slice;if(n&&e.bind===n)return n.apply(e,i.call(arguments,1));var r=i.call(arguments,2);return function(){return e.apply(t,r.concat(i.call(arguments)))}}function l(e,t,n,i){e.addEventListener?e.addEventListener(t,n,i):e.attachEvent("on"+t,n)}function u(e){var t={};return p(e.split(","),function(e){t[e]=1}),t}var d=u("svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph");function f(e){return d[e]?document.createElementNS("http://www.w3.org/2000/svg",e):document.createElement(e)}function v(e){e&&e.parentNode&&e.parentNode.removeChild(e)}var m,g=[],y="function"==typeof Promise&&/native code/.test(Promise);function w(e,n){if(n&&(e=h(e,n)),g.push(e),!m)if(m=function(){var e=g.slice(0);g=[],m=null;for(var t=0,n=e.length;t<n;t++)e[t]()},"function"==typeof t)t(m);else if("function"==typeof MessageChannel){var i=new MessageChannel,r=i.port2;i.port1.onmessage=m,r.postMessage(1)}else y?Promise.resolve().then(m):setTimeout(m,0)}var x="undefined"!=typeof navigator&&navigator.userAgent.match(/msie\s*([0-9]+)/i),N=x?x[1]-0:0,E=N&&N<9;function T(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}9===N&&l(document,"selectionchange",function(){var e=document.activeElement;"TEXTAREA"!==e.tagName&&"INPUT"!==e.tagName||T(e,"input")});var C=u("area,base,br,col,embed,hr,img,input,keygen,param,source,track,wbr"),R="<<anonymous>>";function b(e){return e&&1===e.nodeType?"element":Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function _(e){var t=function(){};t.isRequired=a;var n=function(t,n,i,r,o){var a=n[i],s=b(a);if(r=r||R,null!=a)e(n,i,r,o);else if(t)throw new Error("[SAN ERROR] The `"+i+"` is marked as required in `"+r+"`, but its value is "+s)};return(t=h(n,null,!1)).isRequired=h(n,null,!0),t}function S(e){return _(function(t,n,i,r){var o=b(t[n]);if(o!==e)throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+o+" supplied to "+i+", expected "+e+")")})}var A=(_(a),_(a),_(a),_(a),_(a),_(a),_(a));function O(e){this.source=e,this.len=this.source.length,this.index=0}function k(e){return(e=e||{}).textExpr||(e.directives=e.directives||{},e.props=e.props||[],e.events=e.events||[],e.children=e.children||[]),e}function I(e){return e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()})}A={any:_(a),array:S("array"),object:S("object"),func:S("function"),string:S("string"),number:S("number"),bool:S("boolean"),symbol:S("symbol"),arrayOf:function(e){return _(function(t,n,i,r){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `arrayOf`, expected `function`");var o=t[n],a=b(o);if("array"!==a)throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+a+" supplied to "+i+", expected array)");for(var s=0,c=o.length;s<c;s++)e(o,s,i,r+"["+s+"]")})},instanceOf:function(e){return _(function(t,n,i,r){var o=t[n];if(!(o instanceof e)){var a=o.constructor&&o.constructor.name?o.constructor.name:R,s=e.name||R;throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+a+" supplied to "+i+", expected instance of "+s+")")}})},shape:function(e){return _(function(t,n,i,r){if("object"!==b(e))throw new Error("[SAN ERROR] Data `"+r+"` of `"+i+"` has invalid DataType notation inside `shape`, expected `object`");var o=t[n],a=b(o);if("object"!==a)throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+a+" supplied to "+i+", expected object)");for(var s in e)if(e.hasOwnProperty(s)){var c=e[s];"function"==typeof c&&c(o,s,i,r+"."+s)}})},oneOf:function(e){return _(function(t,n,i,r){if("array"!==b(e))throw new Error("[SAN ERROR] Data `"+r+"` of `"+i+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],a=0,s=e.length;a<s;a++)if(o===e[a])return;throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of value(`"+o+"` supplied to "+i+", expected one of "+e.join(",")+")")})},oneOfType:function(e){return _(function(t,n,i,r){if("array"!==b(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],a=0,s=e.length;a<s;a++){var c=e[a];if("function"==typeof c)try{return void c(t,n,i,r)}catch(e){}}throw new Error("[SAN ERROR] Invalid "+i+" data `"+n+"` of value(`"+o+"` supplied to "+i+")")})},objectOf:function(e){return _(function(t,n,i,r){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `objectOf`, expected function");var o=t[n],a=b(o);if("object"!==a)throw new Error("[SAN ERROR] Invalid "+i+" data `"+n+"` of type("+a+" supplied to "+i+", expected object)");for(var s in o)o.hasOwnProperty(s)&&e(o,s,i,r+"."+s)})},exact:function(e){return _(function(t,n,i,r,o){if("object"!==b(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `exact`");var a=t[n],c=b(a);if("object"!==c)throw new Error("[SAN ERROR] Invalid data `"+r+"` of type `"+c+"`(supplied to "+i+", expected `object`)");var p={};for(var h in s(p,e),s(p,a),p)if(p.hasOwnProperty(h)){var l=e[h];if(!l)throw new Error("[SAN ERROR] Invalid data `"+r+"` key `"+h+"` supplied to `"+i+"`. (`"+h+"` is not defined in `DataTypes.exact`)");if(!(h in a))throw new Error("[SAN ERROR] Invalid data `"+r+"` key `"+h+"` supplied to `"+i+"`. (`"+h+"` is marked `required` in `DataTypes.exact`)");l(a,h,i,r+"."+h,o)}})}},O.prototype.currentCode=function(){return this.charCode(this.index)},O.prototype.cut=function(e,t){return this.source.slice(e,t)},O.prototype.go=function(e){this.index+=e},O.prototype.nextCode=function(){return this.go(1),this.currentCode()},O.prototype.charCode=function(e){return this.source.charCodeAt(e)},O.prototype.goUntil=function(e){for(var t;this.index<this.len&&(t=this.currentCode());)switch(t){case 32:case 9:this.index++;break;default:return t===e?(this.index++,1):void 0}},O.prototype.match=function(e){e.lastIndex=this.index;var t=e.exec(this.source);return t&&(this.index=e.lastIndex),t};var P={STRING:1,NUMBER:2,BOOL:3,ACCESSOR:4,INTERP:5,CALL:6,TEXT:7,BINARY:8,UNARY:9,TERTIARY:10};function L(e){return{type:P.ACCESSOR,paths:e}}function j(e){return e.match(/\s*([\$0-9a-z_]+)/gi)[1]}function M(e){var t=function e(t){var n=function e(t){var n=function(e){var t=$(e);e.goUntil();var n=e.currentCode();switch(n){case 61:case 33:if(61===e.nextCode())return n+=61,61===e.nextCode()&&(n+=61,e.go(1)),{type:P.BINARY,operator:n,segs:[t,$(e)]};e.go(-1)}return t}(t);if(t.goUntil(),38===t.currentCode()){if(38===t.nextCode())return t.go(1),{type:P.BINARY,operator:76,segs:[n,e(t)]};t.go(-1)}return n}(t);if(t.goUntil(),124===t.currentCode()){if(124===t.nextCode())return t.go(1),{type:P.BINARY,operator:248,segs:[n,e(t)]};t.go(-1)}return n}(e);if(e.goUntil(),63===e.currentCode()){e.go(1);var n=M(e);if(e.goUntil(),58===e.currentCode())return e.go(1),{type:P.TERTIARY,segs:[t,n,M(e)]}}return t}function D(e){var t=j(e);switch(t){case"true":case"false":return{type:P.BOOL,value:"true"===t}}var n=L([{type:P.STRING,value:t}]);e:for(;;)switch(e.currentCode()){case 46:e.go(1),n.paths.push({type:P.STRING,value:j(e)});break;case 91:e.go(1),n.paths.push(M(e)),e.goUntil(93);break;default:break e}return n}function B(e){switch(e.goUntil(),e.currentCode()){case 33:return e.go(1),{type:P.UNARY,expr:B(e)};case 34:case 39:return function(e){var t,n=e.currentCode(),i=e.index;e:for(;t=e.nextCode();)switch(t){case 92:e.go(1);break;case n:e.go(1);break e}var r=e.cut(i,e.index);return{type:P.STRING,value:new Function("return "+r)()}}(e);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e){var t=e.match(/\s*(-?[0-9]+(\.[0-9]+)?)/g);return{type:P.NUMBER,value:t[1]-0}}(e);case 40:return function(e){e.go(1);var t=M(e);return e.goUntil(41),t}(e)}return D(e)}function U(e){for(var t=B(e);;){e.goUntil();var n=e.currentCode();switch(n){case 37:case 42:case 47:e.go(1),t={type:P.BINARY,operator:n,segs:[t,B(e)]};continue}break}return t}function F(e){for(var t=U(e);;){e.goUntil();var n=e.currentCode();switch(n){case 43:case 45:e.go(1),t={type:P.BINARY,operator:n,segs:[t,U(e)]};continue}break}return t}function $(e){var t=F(e);e.goUntil();var n=e.currentCode();switch(n){case 60:case 62:return 61===e.nextCode()&&(n+=61,e.go(1)),{type:P.BINARY,operator:n,segs:[t,F(e)]}}return t}function Y(e){if("object"==typeof e&&e.type)return e;var t=M(new O(e));return t.raw=e,t}function G(e,t){e.goUntil();var n=D(e),i=[];if(e.goUntil(40))for(;!e.goUntil(41);)i.push(M(e)),e.goUntil(44);else t&&(i=t);return{type:P.CALL,name:n,args:i}}function X(e,t){var n=G(new O(e),t);return n.raw=e,n}function z(e){for(var t=new O(e),n={type:P.INTERP,expr:M(t),filters:[],raw:e};t.goUntil(124);){var i=G(t);switch(i.name.paths[0].value){case"html":break;case"raw":n.original=1;break;default:n.filters.push(i)}}return n}var W={lt:"<",gt:">",nbsp:" ",quot:'"',emsp:" ",ensp:" ",thinsp:" ",copy:"©",reg:"®",zwnj:"‌",zwj:"‍",amp:"&"};function q(e){return e.replace(/[\^\[\]\$\(\)\{\}\?\*\.\+\\]/g,function(e){return"\\"+e})}function H(e,t){t=t||["{{","}}"];var n,i=new RegExp(q(t[0])+"\\s*([\\s\\S]+?)\\s*"+q(t[1]),"ig"),r=new O(e),o=0,a={type:P.TEXT,segs:[]};function s(e){var t;e&&a.segs.push({type:P.STRING,literal:e,value:(t=e,t.replace(/&#([0-9]+);/g,function(e,t){return String.fromCharCode(+t)}).replace(/&#x([0-9a-f]+);/gi,function(e,t){return String.fromCharCode(parseInt(t,16))}).replace(/&([a-z]+);/gi,function(e,t){return W[t]||e}))})}for(;null!=(n=r.match(i));){s(r.cut(o,r.index-n[0].length));var c=z(n[1]);a.original=a.original||c.original,a.segs.push(c),o=r.index}return s(r.cut(o)),1===a.segs.length&&a.segs[0].type===P.STRING&&(a.value=a.segs[0].value),a}var V={for:function(e){var t=new O(e),n=t.match(/^\s*([\$0-9a-z_]+)(\s*,\s*([\$0-9a-z_]+))?\s+in\s+/gi);if(n)return{item:Y(n[1]),index:Y(n[3]||"$index"),value:D(t)};throw new Error("[SAN FATAL] for syntax error: "+e)},ref:function(e,t){return{value:H(e,t.delimiters)}},if:function(e){return{value:Y(e.replace(/(^\{\{|\}\}$)/g,""))}},elif:function(e){return{value:Y(e.replace(/(^\{\{|\}\}$)/g,""))}},else:function(e){return{value:{}}},html:function(e){return{value:Y(e.replace(/(^\{\{|\}\}$)/g,""))}},transition:function(e){return{value:X(e)}}};function J(e){var t=e.expr;if(t.type===P.TEXT)switch(t.segs.length){case 0:e.expr={type:P.BOOL,value:!0};break;case 1:(t=e.expr=t.segs[0]).type===P.INTERP&&0===t.filters.length&&(e.expr=t.expr)}}function K(e,t,n,i){var r,o,a=t.indexOf("-");switch(a>0&&(o=t.slice(0,a),r=t.slice(a+1)),o){case"on":var s,c={name:r,modifier:{}};for(e.events.push(c);(s=n.indexOf(":"))>0;){var p=n.slice(0,s);if(!/^[a-z]+$/i.test(p))break;c.modifier[p]=!0,n=n.slice(s+1)}c.expr=X(n,[L([{type:P.STRING,value:"$event"}])]);break;case"san":case"s":!function(e,t,n,i){"else-if"===t&&(t="elif");var r=V[t];r&&((e.directives[t]=r(n,i)).raw=n)}(e,r,n,i);break;case"prop":Q(e,r,n,i);break;case"var":e.vars||(e.vars=[]),r=I(r),e.vars.push({name:r,expr:Y(n.replace(/(^\{\{|\}\}$)/g,""))});break;default:Q(e,t,n,i)}}function Q(e,t,n,i){var r=n.match(/^\{=\s*(.*?)\s*=\}$/);if(r)e.props.push({name:t,expr:Y(r[1]),x:1,raw:n});else{var o={name:t,expr:H(n,i.delimiters),raw:n};switch(t){case"class":case"style":p(o.expr.segs,function(e){e.type===P.INTERP&&e.filters.push({type:P.CALL,name:L([{type:P.STRING,value:"_"+o.name}]),args:[]})});break;case"checked":"input"===e.tagName&&J(o)}e.props.push(o)}}function Z(e,t){for(var n=["ROOT"],i=1,r=e.length;i<r;i++)n.push(e[i].tagName);return t&&n.push(t),n.join(">")}function ee(e,t){(t=t||{}).trimWhitespace=t.trimWhitespace||"none";var n=k();if("string"!=typeof e)return n;for(var i,r=new O(e=e.replace(/<!--([\s\S]*?)-->/gm,"").replace(/(^\s+|\s+$)/g,"")),o=/<(\/)?([a-z0-9-]+)\s*/gi,a=/([-:0-9a-z\(\)\[\]]+)(\s*=\s*(['"])([^\3]*?)\3)?\s*/gi,s=n,c=[n],p=0,h=0;null!=(i=r.match(o));){var l=i[1],u=i[2].toLowerCase();if(N(e.slice(h,r.index-i[0].length)),l&&62===r.currentCode()){var d=p;if(C[u])throw new Error("[SAN ERROR] "+Z(c,u)+" is a `auto closed` tag, so it cannot be closed with </"+u+">");if(c[d].tagName!==u&&("table"!==u||"tbody"!==c[d].tagName))throw new Error("[SAN ERROR] "+Z(c)+" is closed with "+u);for(;d>0&&c[d].tagName!==u;)d--;d>0&&(s=c[p=d-1]),r.go(1)}else{if(l){if(60===r.currentCode())throw new Error("[SAN ERROR] "+Z(c)+"'s close tag not closed");throw new Error("[SAN ERROR] "+Z(c)+"'s close tag has attributes")}if(!l){for(var f=k({tagName:u}),v=C[u];;){var m=r.currentCode();if(62===m){r.go(1);break}if(47===m&&62===r.charCode(r.index+1)){r.go(2),v=1;break}if(60===m)throw new Error("[SAN ERROR] "+Z(c,u)+" is not closed");var g=r.match(a);if(g){if(61===r.charCode(g.index+g[1].length)&&!g[2])throw new Error("[SAN ERROR] "+Z(c,u)+" attribute `"+g[1]+'` is not wrapped with ""');K(f,g[1],g[2]?g[4]:"",t)}}if(f.directives.else||f.directives.elif)for(var y=s.children.length;y--;){var w=s.children[y];if(!w.textExpr){if(!w.directives.if)throw new Error("[SAN FATEL] else not match if.");w.elses=w.elses||[],w.elses.push(f);break}s.children.splice(y,1)}else{if("tr"===f.tagName&&"table"===s.tagName){var x=k({tagName:"tbody"});s.children.push(x),s=x,c[++p]=x}s.children.push(f)}v||(s=f,c[++p]=f)}}h=r.index}return N(r.cut(h)),n;function N(e){switch(t.trimWhitespace){case"blank":/^\s+$/.test(e)&&(e=null);break;case"all":e=e.replace(/(^\s+|\s+$)/g,"")}e&&s.children.push(k({textExpr:H(e,t.delimiters)}))}}var te={url:encodeURIComponent,_class:function(e){return e instanceof Array?e.join(" "):e},_style:function(e){if("object"==typeof e){var t="";for(var n in e)t+=n+":"+e[n]+";";return t}return e},_sep:function(e,t){return e?t+e:e}};function ne(e,t,n){if(null!=e.value)return e.value;var i=ae.get(t,e);if(null==i){switch(e.type){case P.UNARY:i=!ne(e.expr,t,n);break;case P.BINARY:var r=ne(e.segs[0],t,n),o=ne(e.segs[1],t,n);switch(e.operator){case 37:i=r%o;break;case 43:i=r+o;break;case 45:i=r-o;break;case 42:i=r*o;break;case 47:i=r/o;break;case 60:i=r<o;break;case 62:i=r>o;break;case 76:i=r&&o;break;case 94:i=r!=o;break;case 121:i=r<=o;break;case 122:i=r==o;break;case 123:i=r>=o;break;case 155:i=r!==o;break;case 183:i=r===o;break;case 248:i=r||o}break;case P.TERTIARY:i=ne(e.segs[ne(e.segs[0],t,n)?1:2],t,n);break;case P.ACCESSOR:i=t.get(e);break;case P.INTERP:if(i=ne(e.expr,t,n),n)for(var a=0,s=e.filters.length;a<s;a++){var c=e.filters[a],p=c.name.paths[0].value;n.filters[p]?i=n.filters[p].apply(n,[i].concat(ie(c.args,t,n))):te[p]&&(i=te[p](i,c.args[0]?c.args[0].value:""))}null==i&&(i="");break;case P.TEXT:var h="";for(a=0,s=e.segs.length;a<s;a++){var l=e.segs[a];h+=l.value||ne(l,t,n)}return h}ae.set(t,e,i)}return i}function ie(e,t,n){for(var i=[],r=0;r<e.length;r++)i.push(ne(e[r],t,n));return i}var re={},oe=1,ae={clear:function(){oe||(oe=1,re={})},set:function(e,t,n){t.raw&&(oe=0,(re[e.id]=re[e.id]||{})[t.raw]=n)},get:function(e,t){if(t.raw&&re[e.id])return re[e.id][t.raw]}};function se(e,t,n){for(var i=0,r=t.length;i<r;i++)if(ce(e,t[i],n))return 1;return 0}function ce(e,t,n){switch(t.type){case P.ACCESSOR:for(var i=t.paths,r=i.length,o=e.paths,a=o.length,s=1,c=0;c<r;c++){var h=i[c];if(h.type===P.ACCESSOR&&ce(e,h,n))return 1;s&&c<a&&(h.value||ne(h,n))!=(o[c].value||ne(o[c],n))&&(s=0)}return s&&(s=Math.max(1,a-r+2)),s;case P.UNARY:return ce(e,t.expr,n)?1:0;case P.TEXT:case P.BINARY:case P.TERTIARY:return se(e,t.segs,n);case P.INTERP:var l;return ce(e,t.expr,n)?1:(p(t.filters,function(t){return!(l=se(e,t.args,n))}),l?1:0)}return 0}function pe(e){return this[e]}var he={start:{},compiled:{is:pe,compiled:!0},inited:{is:pe,compiled:!0,inited:!0},painting:{is:pe,compiled:!0,inited:!0,painting:!0},created:{is:pe,compiled:!0,inited:!0,created:!0},attached:{is:pe,compiled:!0,inited:!0,created:!0,attached:!0},leaving:{is:pe,compiled:!0,inited:!0,created:!0,attached:!0,leaving:!0},detached:{is:pe,compiled:!0,inited:!0,created:!0,detached:!0},disposed:{is:pe,disposed:!0}},le={TEXT:1,IF:2,FOR:3,ELEM:4,CMPT:5,SLOT:6,TPL:7};function ue(e,t){var n=e.hotspot.props[t];if(null!=n)return e.props[n]}var de={readonly:"readOnly",cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",rowspan:"rowSpan",valign:"vAlign",usemap:"useMap",frameborder:"frameBorder",for:"htmlFor"},fe={prop:function(e,t,n,i){var r=de[n]||n;r in e?e[r]=null==t?"":t:e.setAttribute(n,t)},output:function(e,t,n){n.set(t.expr,e.el[t.name],{target:{id:e.id,prop:t.name}})}},ve={prop:function(e,t,n){e.setAttribute(n,t)}},me={prop:function(e,t,n,i,r){e[de[n]||n]=!!(r&&""===r.raw||t&&"false"!==t&&"0"!==t)}},ge={style:{prop:function(e,t){e.style.cssText=t}},class:{prop:function(e,t){e.className=t}},slot:{prop:a},readonly:me,disabled:me,autofocus:me,required:me,draggable:me},ye={checkbox:function(e,t){var n=!1;return p(e,function(e){return!(n=e===t)}),n},radio:function(e,t){return e===t}},we={input:{multiple:me,checked:{prop:function(e,t,n,i){var r=function(e,t,n){var i=ue(e.aNode,"value"),r=ue(e.aNode,"type");if(i&&r){var o=ne(r.expr,e.scope,e.owner);if(ye[o]){var a=ue(e.aNode,"checked");return a.hintExpr||(a.hintExpr=i.expr),!!ye[o](t,ne(i.expr,e.scope,e.owner))}}}(i,t);me.prop(e,null!=r?r:t,"checked",i)},output:function(e,t,n){var i=e.el,r=ue(e.aNode,"value"),o=ue(e.aNode,"type")||{};if(r&&o)switch(o.raw){case"checkbox":return void n[i.checked?"push":"remove"](t.expr,i.value);case"radio":return void(i.checked&&n.set(t.expr,i.value,{target:{id:e.id,prop:t.name}}))}fe.output(e,t,n)}}},option:{value:{prop:function(e,t,n,i){fe.prop(e,t,n,i),function(e,t){for(var n=e.parent;n&&"select"!==n.tagName;)n=n.parent;if(n){var i,r,o=null;if((i=ue(n.aNode,"value"))&&(r=i.expr)&&(o=n.nodeType===le.CMPT?ne(r,n.data,n):ne(r,n.scope,n.owner)||""),o===t)return 1}}(i,t)&&(e.selected=!0)}}},select:{value:{prop:function(e,t){e.value=t||""},output:fe.output}}};function xe(e,t){if(d[e])return ve;var n=we[e];n||(n=we[e]={});var i=n[t];return i||(i=ge[t]||fe,n[t]=i),i}function Ne(e,t,n){var i=e.option.target;return i&&i.id===t.id&&(!n||i.prop===n)}function Ee(e,t,n){for(var i=e,r=0;null!=i&&r<t.paths.length;r++)i=i[ne(t.paths[r],n)];return i}function Te(e,t){this.id=o(),this.parent=t,this.raw=e||{},this.listeners=[]}function Ce(e,t,n,i){if(0===t.length)return n;var r,o=ne(t[0],i);if(e instanceof Array){var a=+o;return(r=e.slice(0))[isNaN(a)?o:a]=Ce(e[a],t.slice(1),n,i),r}if("object"==typeof e){for(var s in r={},e)s!==o&&(r[s]=e[s]);return r[o]=Ce(e[o]||{},t.slice(1),n,i),r}return e}function Re(e,t,n,i){var r=Ee(this,e.expr.name,n);if("function"==typeof r){var o=new Te({$event:t?i:i||window.event},n);r.apply(this,ie(e.expr.args,o,this))}}Te.prototype.checkDataTypes=function(){this.typeChecker&&this.typeChecker(this.raw)},Te.prototype.setTypeChecker=function(e){this.typeChecker=e},Te.prototype.listen=function(e){"function"==typeof e&&this.listeners.push(e)},Te.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)e&&this.listeners[t]!==e||this.listeners.splice(t,1)},Te.prototype.fire=function(e){if(!(e.option.silent||e.option.silence||e.option.quiet))for(var t=0;t<this.listeners.length;t++)this.listeners[t].call(this,e)},Te.prototype.get=function(e,t){var n=this.raw;if(!e)return n;var i=(e=Y(e)).paths;if(t=t||this,null==(n=n[i[0].value])&&this.parent)n=this.parent.get(e,t);else for(var r=1,o=i.length;null!=n&&r<o;r++)n=n[i[r].value||ne(i[r],t)];return n},Te.prototype.set=function(e,t,n){n=n||{};var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data set: "+i);(this.get(e)!==t||n.force)&&(ae.clear(),this.raw=Ce(this.raw,e.paths,t,this),this.fire({type:1,expr:e,value:t,option:n}),this.checkDataTypes())},Te.prototype.merge=function(e,t,n){n=n||{};var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data merge: "+i);if("object"!=typeof this.get(e))throw new Error("[SAN ERROR] Merge Expects a Target of Type 'object'; got "+typeof oldValue);if("object"!=typeof t)throw new Error("[SAN ERROR] Merge Expects a Source of Type 'object'; got "+typeof t);for(var r in t)this.set(L(e.paths.concat([{type:P.STRING,value:r}])),t[r],n)},Te.prototype.apply=function(e,t,n){var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data apply: "+i);var r=this.get(e);if("function"!=typeof t)throw new Error("[SAN ERROR] Invalid Argument's Type in Data apply: Expected Function but got "+typeof t);this.set(e,t(r),n)},Te.prototype.splice=function(e,t,n){n=n||{};var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data splice: "+i);var r=this.get(e),o=[];if(r instanceof Array){var a=t[0];if(a<0||a>r.length)return;var s=r.slice(0);o=s.splice.apply(s,t),ae.clear(),this.raw=Ce(this.raw,e.paths,s,this),this.fire({expr:e,type:2,index:a,deleteCount:o.length,value:o,insertions:t.slice(2),option:n})}return this.checkDataTypes(),o},Te.prototype.push=function(e,t,n){var i=this.get(e);if(i instanceof Array)return this.splice(e,[i.length,0,t],n),i.length+1},Te.prototype.pop=function(e,t){var n=this.get(e);if(n instanceof Array){var i=n.length;if(i)return this.splice(e,[i-1,1],t)[0]}},Te.prototype.shift=function(e,t){return this.splice(e,[0,1],t)[0]},Te.prototype.unshift=function(e,t,n){var i=this.get(e);if(i instanceof Array)return this.splice(e,[0,0,t],n),i.length+1},Te.prototype.removeAt=function(e,t,n){this.splice(e,[t,1],n)},Te.prototype.remove=function(e,t,n){var i=this.get(e);if(i instanceof Array)for(var r=i.length;r--;)if(i[r]===t){this.splice(e,[r,1],n);break}};var be=u("div,span,input,button,textarea,form,label,dl,dt,dd,ul,ol,li,a,b,u,h1,h2,h3,h4,h5,h6"),_e="undefined"!=typeof window;function Se(e,t,n){t&&(n?t.insertBefore(e,n):t.appendChild(e))}function Ae(e){if("undefined"!=typeof window&&"undefined"!=typeof navigator&&window.document&&function(e){return/^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(e.tagName)}(e)){var t='[SAN WARNING] set html for element "'+e.tagName+'" may cause an error in old IE';if("object"!=typeof console||!console.warn)throw new Error(t);console.warn(t)}}function Oe(e){for(var t=[],n=e;n;){switch(n.nodeType){case le.ELEM:t.unshift(n.tagName);break;case le.IF:t.unshift("if");break;case le.FOR:t.unshift("for["+n.anode.directives.for.raw+"]");break;case le.SLOT:t.unshift("slot["+(n.name||"default")+"]");break;case le.TPL:t.unshift("template");break;case le.CMPT:t.unshift("component["+(n.subTag||"root")+"]");break;case le.TEXT:t.unshift("text")}n=n.parent}return t}function ke(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,r){var o=r.current;if(o)switch(o.nodeType){case 8:if("s-text"===o.data)for(this.sel=o,o.data=this.id,r.goNext();;){if(!(o=r.current))throw new Error("[SAN REVERSE ERROR] Text end flag not found. \nPaths: "+Oe(this).join(" > "));if(s="text",8===(a=o).nodeType&&a.data==="/s-"+s){this.el=o,r.goNext(),o.data=this.id;break}r.goNext()}break;case 3:r.goNext(),this.aNode.textExpr.original||(this.el=o)}else this.el=document.createTextNode(""),Se(this.el,r.target,r.current)}var a,s}ke.prototype.nodeType=le.TEXT,ke.prototype.attach=function(e,t){if(this.content=ne(this.aNode.textExpr,this.scope,this.owner),this.aNode.textExpr.original){this.sel=document.createComment(this.id),Se(this.sel,e,t),this.el=document.createComment(this.id),Se(this.el,e,t);var n=document.createElement("script");e.insertBefore(n,this.el),n.insertAdjacentHTML("beforebegin",this.content),e.removeChild(n)}else this.el=document.createTextNode(this.content),Se(this.el,e,t)},ke.prototype.dispose=function(){this._prev=null,this.el=null,this.sel=null};var Ie=_e&&("string"==typeof document.createTextNode("").textContent?"textContent":"data");function Pe(e,t){for(var n=0;n<e.length;n++){var i=e[n];if(!i.overview){var r=i.expr.paths;i.overview=r[0].value,r.length>1&&(i.extOverview=r[0].value+"."+r[1].value,i.wildOverview=r[0].value+".*")}if(t[i.overview]||i.wildOverview&&t[i.wildOverview]||i.extOverview&&t[i.extOverview])return!0}}function Le(e){this.raw=[],this.index=0,this.target=e;for(var t,n=e.firstChild;n;){switch(t=n.nextSibling,n.nodeType){case 3:/^\s*$/.test(n.data||n.textContent)?v(n):this.raw.push(n);break;case 1:case 8:this.raw.push(n)}n=t}this.current=this.raw[this.index],this.next=this.raw[this.index+1]}function je(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.lifeCycle=he.start,this.children=[],this._elFns=[],this.parentComponent=i.nodeType===le.CMPT?i:i.parentComponent,this.id=o(),yt(this),this._toPhase("inited"),r){var a=r.current;if(!a)throw new Error("[SAN REVERSE ERROR] Element not found. \nPaths: "+Oe(this).join(" > "));if(1!==a.nodeType)throw new Error("[SAN REVERSE ERROR] Element type not match, expect 1 but "+a.nodeType+".\nPaths: "+Oe(this).join(" > "));if(a.tagName.toLowerCase()!==this.tagName)throw new Error("[SAN REVERSE ERROR] Element tagName not match, expect "+this.tagName+" but meat "+a.tagName.toLowerCase()+".\nPaths: "+Oe(this).join(" > "));this.el=a,r.goNext(),Ze(this),this._attached()}}function Me(e){e.el=null,e.sel=null,e.owner=null,e.scope=null,e.aNode=null,e.parent=null,e.parentComponent=null,e.children=null,e._toPhase&&e._toPhase("disposed"),e._ondisposed&&e._ondisposed()}function De(e,t,n,i){var r=n.nodeType===le.CMPT,o=r?n:n.childOwner||n.owner;if(i=i||(r?n.data:n.childScope||n.scope),e.textExpr)return new ke(e,o,i,n,t);if(e.directives.if)return new Ke(e,o,i,n,t);if(e.directives.for)return new Ve(e,o,i,n,t);if(be[e.tagName])return new je(e,o,i,n,t);switch(e.tagName){case"slot":return new Ge(e,o,i,n,t);case"template":return new Qe(e,o,i,n,t);default:var a=o.getComponentType(e);if(a)return new a({aNode:e,owner:o,scope:i,parent:n,subTag:e.tagName,reverseWalker:t})}return new je(e,o,i,n,t)}function Be(e,t,n){for(var i=e.children,r=i&&i.length;r--;)i[r].dispose(t,n)}function Ue(e,t){for(var n=0,i=e.children.length;n<i;n++)e.children[n]._update(t)}function Fe(e){this.lifeCycle=he[e]||this.lifeCycle}function $e(e,t,n){var i=t.nodeType===le.CMPT,r=i?t:t.childOwner||t.owner;if(n=n||(i?t.data:t.childScope||t.scope),e.textExpr)return new ke(e,r,n,t);if(e.directives.if)return new Ke(e,r,n,t);if(e.directives.for)return new Ve(e,r,n,t);if(be[e.tagName])return new je(e,r,n,t);switch(e.tagName){case"slot":return new Ge(e,r,n,t);case"template":return new Qe(e,r,n,t);default:var o=r.getComponentType(e);if(o)return new o({aNode:e,owner:r,scope:n,parent:t,subTag:e.tagName})}return new je(e,r,n,t)}function Ye(e,t){this.sel=document.createComment(this.id),Se(this.sel,e,t),function(e,t,n){t=t||e.el;for(var i=e.aNode.children,r=0;r<i.length;r++){var o=$e(i[r],e);e.children.push(o),o.attach(t,n)}}(this,e,t),this.el=document.createComment(this.id),Se(this.el,e,t),this._toPhase("attached")}function Ge(e,t,n,i,r){var a=k();this.aNode=a,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===le.CMPT?i:i.parentComponent,this.id=o(),this.lifeCycle=he.start,this.children=[],this.nameBind=ue(e,"name"),this.nameBind&&(this.isNamed=!0,this.name=ne(this.nameBind.expr,this.scope,this.owner));var s,c=t.givenSlots;c&&(s=this.isNamed?c.named[this.name]:c.noname),s&&(this.isInserted=!0),a.children=s||e.children.slice(0);var h=this;a.vars=e.vars;var l={};p(a.vars,function(e){h.isScoped=!0,l[e.name]=ne(e.expr,n,t)}),this.isInserted&&(this.childOwner=t.owner,this.childScope=t.scope),this.isScoped&&(this.childScope=new Te(l,this.childScope||this.scope)),t.slotChildren.push(this),r&&(this.sel=document.createComment(this.id),Se(this.sel,r.target,r.current),p(this.aNode.children,function(e){h.children.push(De(e,r,h))}),this.el=document.createComment(this.id),Se(this.el,r.target,r.current),this._toPhase("attached"))}function Xe(e,t){var n={};for(var i in t=t||{},e)t[i]||(n[i]=e[i]);return n}function ze(e){Be(this,e,1),e||v(this.el),Me(this)}function We(){this.el=this.el||document.createComment(this.id)}function qe(e,t,n){this.id=o(),this.parent=e.scope,this.raw={},this.listeners=[],this.directive=e.aNode.directives.for,this.raw[this.directive.item.raw]=t,this.raw[this.directive.index.raw]=n}function He(e,t,n){var i=new qe(e,t,n);return $e(e.itemANode,e,i)}function Ve(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===le.CMPT?i:i.parentComponent,this.id=o(),this.children=[],this.itemANode=k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:Xe(e.directives,{for:1})}),this.param=e.directives.for,r){var a=this;p(ne(this.param.value,this.scope,this.owner),function(e,t){var n=new qe(a,e,t),i=De(a.itemANode,r,a,n);a.children.push(i)}),this._create(),Se(this.el,r.target,r.current)}}function Je(e){return k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:Xe(e.directives,{if:1,else:1,elif:1})})}function Ke(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===le.CMPT?i:i.parentComponent,this.id=o(),this.children=[],this.cond=this.aNode.directives.if.value,r){if(ne(this.cond,this.scope,this.owner))this.elseIndex=-1,this.children[0]=De(Je(e),r,this);else{var a=this;p(e.elses,function(e,t){var n=e.directives.elif;if(!n||n&&ne(n.value,a.scope,a.owner))return a.elseIndex=t,a.children[0]=De(Je(e),r,a),!1})}this._create(),Se(this.el,r.target,r.current)}}function Qe(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===le.CMPT?i:i.parentComponent,this.id=o(),this.lifeCycle=he.start,this.children=[],r){this.sel=document.createComment(this.id),Se(this.sel,r.target,r.current);var a=this;p(this.aNode.children,function(e){a.children.push(De(e,r,a))}),this.el=document.createComment(this.id),Se(this.el,r.target,r.current),this._toPhase("attached")}}function Ze(e){if(!e.aNode.directives.html){var t=new Le(e.el);p(e.aNode.children,function(n){e.children.push(De(n,t,e))})}}function et(e,t,n){var i=n.name;xe(e.tagName,i).prop(e.el,t,i,e,n)}ke.prototype._update=function(e){if(!this.aNode.textExpr.value)for(var t=e?e.length:0;t--;)if(ce(e[t].expr,this.aNode.textExpr,this.scope)){var n=ne(this.aNode.textExpr,this.scope,this.owner);if(n!==this.content)if(this.content=n,this.aNode.textExpr.original){for(var i=this.sel.nextSibling,r=this.el.parentNode;i!==this.el;){var o=i;i=i.nextSibling,v(o)}Ae(r);var a=document.createElement("script");r.insertBefore(a,this.el),a.insertAdjacentHTML("beforebegin",n),r.removeChild(a)}else this.el[Ie]=n;return}},Le.prototype.goNext=function(){this.current=this.raw[++this.index],this.next=this.raw[this.index+1]},je.prototype.nodeType=le.ELEM,je.prototype.attach=ot,je.prototype.detach=ct,je.prototype.dispose=pt,je.prototype._create=it,je.prototype._toPhase=Fe,je.prototype._onEl=ht,je.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||gt(this,this.disposeNoDetach,this.disposeNoTransition):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},je.prototype._update=function(e){if(Pe(e,this.aNode.hotspot.data)){for(var t=this,n=this.aNode.hotspot.dynamicProps,i=0,r=n.length;i<r;i++)for(var o=n[i],a=0,s=e.length;a<s;a++){var c=e[a];if(!Ne(c,this,o.name)&&(ce(c.expr,o.expr,this.scope)||o.hintExpr&&ce(c.expr,o.hintExpr,this.scope))){et(this,ne(o.expr,this.scope,this.owner),o);break}}var h=this.aNode.directives.html;h?p(e,function(e){if(ce(e.expr,h.value,t.scope))return Ae(t.el),t.el.innerHTML=ne(h.value,t.scope,t.owner),!1}):Ue(this,e)}},je.prototype._attached=mt,Ge.prototype.nodeType=le.SLOT,Ge.prototype.dispose=function(e,t){this.childOwner=null,this.childScope=null,Be(this,e,t),Me(this)},Ge.prototype.attach=Ye,Ge.prototype._toPhase=Fe,Ge.prototype._update=function(e,t){var n=this;if(this.nameBind&&ne(this.nameBind.expr,this.scope,this.owner)!==n.name)return this.owner._notifyNeedReload(),!1;if(t)this.isInserted&&Ue(this,e);else if(this.isScoped){p(this.aNode.vars,function(e){n.childScope.set(e.name,ne(e.expr,n.scope,n.owner))});var i=[];p(e,function(e){n.isInserted||i.push(e),p(n.aNode.vars,function(t){var r=t.name,o=ce(e.expr,t.expr,n.scope);o<1||(2!==e.type?i.push({type:1,expr:L([{type:P.STRING,value:r}]),value:n.childScope.get(r),option:e.option}):2===o&&i.push({expr:L([{type:P.STRING,value:r}]),type:2,index:e.index,deleteCount:e.deleteCount,value:e.value,insertions:e.insertions,option:e.option}))})}),Ue(this,i)}else this.isInserted||Ue(this,e)},qe.prototype.exprResolve=function(e){var t=this.directive,n=this;function i(e){return e.type===P.ACCESSOR&&e.paths[0].value===t.item.paths[0].value?L(t.value.paths.concat({type:P.NUMBER,value:n.get(t.index)},e.paths.slice(1))):e}var r=[];return p((e=i(e)).paths,function(e){r.push(e.type===P.ACCESSOR&&e.paths[0].value===t.index.paths[0].value?{type:P.NUMBER,value:n.get(t.index)}:i(e))}),L(r)},c(qe,Te),p(["set","remove","unshift","shift","push","pop","splice"],function(e){qe.prototype["_"+e]=Te.prototype[e],qe.prototype[e]=function(t){t=this.exprResolve(Y(t)),ae.clear(),this.parent[e].apply(this.parent,[t].concat(Array.prototype.slice.call(arguments,1)))}}),Ve.prototype.nodeType=le.FOR,Ve.prototype._create=We,Ve.prototype.dispose=ze,Ve.prototype.attach=function(e,t){this._create(),Se(this.el,e,t);for(var n=this.el||e.firstChild,i=ne(this.param.value,this.scope,this.owner),r=i&&i.length||0,o=0;o<r;o++){var a=He(this,i[o],o);this.children.push(a),a.attach(e,n)}},Ve.prototype.detach=function(){this.lifeCycle.attached&&(Be(this),this.children=[],v(this.el),this.lifeCycle=he.detached)},Ve.prototype._update=function(e){var t=this,n=this.aNode.directives.transition,i=this.children.length,r=new Array(i);function o(e){for(var t=0,n=r.length;t<n;t++)(r[t]=r[t]||[]).push(e)}for(var a,s=[],c=this.el.parentNode,p=c.firstChild,h=c.lastChild,l=i>0&&p===this.children[0].el&&(h===this.el||h===this.children[i-1].el)||0===i&&p===this.el&&h===this.el,u=ne(this.param.value,this.scope,this.owner),d=u&&u.length||0,f=0,v=e.length;f<v;f++){var m=e[f],g=ce(m.expr,this.param.value,this.scope);if(g){if(g>2){var y=m.expr.paths,w=this.param.value.paths.length,x=+ne(y[w],this.scope,this.owner);isNaN(x)?o(m):(m={type:m.type,expr:L(this.param.item.paths.concat(y.slice(w+1))),value:m.value,index:m.index,deleteCount:m.deleteCount,insertions:m.insertions,option:m.option},(r[x]=r[x]||[]).push(m),this.children[x]&&(2===m.type?this.children[x].scope._splice(m.expr,[].concat(m.index,m.deleteCount,m.insertions),{silent:1}):this.children[x].scope._set(m.expr,m.value,{silent:1})))}else if(2!==m.type){i>d&&(s=s.concat(this.children.slice(d)),r=r.slice(0,d),this.children=this.children.slice(0,d));for(var N=0;N<d;N++)(r[N]=r[N]||[]).push({type:1,option:m.option,expr:L(this.param.item.paths.slice(0)),value:u[N]}),g<2&&r[N].push(m),this.children[N]?this.children[N].scope._set(this.param.item,u[N],{silent:1}):this.children[N]=0;a=1}else if(2===g&&2===m.type&&!a){var E=m.index,T=m.deleteCount,C=m.insertions.length,R=C-T;if(R){var b={type:1,option:m.option,expr:this.param.index};for(N=E+T;N<this.children.length;N++)(r[N]=r[N]||[]).push(b),this.children[N]&&this.children[N].scope._set(b.expr,N-T+C,{silent:1})}for(var _=T;_--;)_<C&&((r[N=E+_]=r[N]||[]).push({type:1,option:m.option,expr:L(this.param.item.paths.slice(0)),value:m.insertions[_]}),this.children[N]&&this.children[N].scope._set(this.param.item,m.insertions[_],{silent:1}));if(R<0)s=s.concat(this.children.splice(E+C,-R)),r.splice(E+C,-R);else if(R>0){var S=[E+T,0].concat(new Array(R));this.children.splice.apply(this.children,S),r.splice.apply(r,S)}}}else o(m)}var A=this.children.length;if(A!==i){var O={type:1,option:{},expr:L(this.param.value.paths.concat({type:P.STRING,value:"length"}))};Pe([O],this.aNode.hotspot.data)&&o(O)}this._doCreateAndUpdate=B;var k=!n&&l&&0===A,I=0;for(N=0;N<s.length;N++){var j=s[N];j?(j._ondisposed=D,j.dispose(k,k)):D()}if(k){var M=c.cloneNode(!1);c.parentNode.replaceChild(M,c),this.el=document.createComment(this.id),M.appendChild(this.el)}function D(){++I===s.length&&B===t._doCreateAndUpdate&&B()}function B(){if(t._doCreateAndUpdate=null,!k){var e=t.el;if(0===i&&l)for(var n=0;n<A;n++)t.children[n]=He(t,u[n],n),t.children[n].attach(c,e);else{var o=-1;for(n=0;n<A;n++){var a=t.children[n];if(a)r[n]&&a._update(r[n]);else{if(o<n)for(o=n+1,e=null;o<A;){var s=t.children[o];if(s){e=s.sel||s.el;break}o++}t.children[n]=He(t,u[n],n),t.children[n].attach(c,e||t.el)}}}}}0===s.length&&B()},Ke.prototype.nodeType=le.IF,Ke.prototype._create=We,Ke.prototype.dispose=ze,Ke.prototype.attach=function(e,t){var n,i,r=this;ne(this.cond,this.scope,this.owner)?(i=$e(Je(r.aNode),r),n=-1):p(r.aNode.elses,function(e,t){var o=e.directives.elif;if(!o||o&&ne(o.value,r.scope,r.owner))return i=$e(Je(e),r),n=t,!1}),i&&(r.children[0]=i,i.attach(e,t),r.elseIndex=n),this._create(),Se(this.el,e,t)},Ke.prototype._update=function(e){var t,n=this,i=n.aNode;if(ne(this.cond,this.scope,this.owner)?t=-1:p(n.aNode.elses,function(e,r){var o=e.directives.elif;if(o&&ne(o.value,n.scope,n.owner)||!o)return t=r,i=e,!1}),t===n.elseIndex)Ue(n,e);else{var r=n.children[0];n.children=[],r?(r._ondisposed=o,r.dispose()):o(),n.elseIndex=t}function o(){if(void 0!==t){var e=$e(Je(i),n);e.attach(n.el.parentNode,n.el),n.children[0]=e}}},Qe.prototype.nodeType=le.TPL,Qe.prototype.attach=Ye,Qe.prototype.dispose=function(e,t){Be(this,e,t),Me(this)},Qe.prototype._toPhase=Fe,Qe.prototype._update=function(e){Ue(this,e)};var tt,nt={class:1,style:1,id:1};function it(){if(!this.lifeCycle.created){this.lifeCycle=he.painting;var e=this.nodeType===le.CMPT,t=this.aNode.hotspot.sourceNode,n=this.aNode.props;t?(this.el=t.cloneNode(),n=this.aNode.hotspot.dynamicProps):this.el=f(this.tagName);for(var i=0,r=n.length;i<r;i++){var o=n[i],a=e?ne(o.expr,this.data,this):ne(o.expr,this.scope,this.owner);!a&&nt[o.name]||et(this,a,o)}this._toPhase("created")}}function rt(e,t,n){if(e._create(),Se(e.el,t,n),!e._contentReady){var i=e.aNode.directives.html;if(i)e.el.innerHTML=ne(i.value,e.scope,e.owner);else for(var r=e.aNode.children,o=0;o<r.length;o++){var a=$e(r[o],e);e.children.push(a),a.attach(e.el)}e._contentReady=1}}function ot(e,t){this.lifeCycle.attached||(rt(this,e,t),this._attached())}function at(e){var t,n=e.nodeType===le.CMPT?e.givenANode:e.aNode,i=n&&n.directives.transition,r=e.owner;return i&&r&&"function"==typeof(t=Ee(r,i.value.name))&&(t=t.apply(r,ie(i.value.args,e.scope,r))),t||e.transition}function st(e){if(!e.lifeCycle.leaving)if(e.disposeNoTransition)e._doneLeave();else{var t=at(e);t&&t.leave?(e._toPhase("leaving"),t.leave(e.el,function(){e._doneLeave()})):e._doneLeave()}}function ct(){st(this)}function pt(e,t){this.leaveDispose=1,this.disposeNoDetach=e,this.disposeNoTransition=t,st(this)}function ht(e,t,n){"function"==typeof t&&(n=!!n,this._elFns.push([e,t,n]),l(this.el,e,t,n))}function lt(e,t){var n=!0,i=t;if(p(e.expr.name.paths,function(e){return!!e.value&&(i=i[e.value],n=!!i)}),!n){var r=[];p(e.expr.name.paths,function(e){r.push(e.value)});var o="[SAN WARNING] "+e.name+' listen fail,"'+r.join(".")+'" not exist';if("object"!=typeof console||!console.warn)throw new Error(o);console.warn(o)}}function ut(){this.composing&&(this.composing=0,T(this,"input"))}function dt(){this.composing=1}function ft(e,t){xe(this.tagName,e.name).output(this,e,t)}function vt(e,t,n){var i=h(ft,e,t,n);return function(e){this.composing||i(e)}}function mt(){this._toPhase("created");for(var e=this.nodeType===le.CMPT,t=e?this.data:this.scope,n=this.aNode.hotspot.xProps,i=0,r=n.length;i<r;i++){var o=n[i];switch(o.name){case"value":switch(this.tagName){case"input":case"textarea":_e&&window.CompositionEvent&&(this._onEl("change",ut),this._onEl("compositionstart",dt),this._onEl("compositionend",ut)),this._onEl("oninput"in this.el?"input":"propertychange",vt(this,o,t));break;case"select":this._onEl("change",h(ft,this,o,t))}break;case"checked":switch(this.tagName){case"input":switch(this.el.type){case"checkbox":case"radio":this._onEl("click",h(ft,this,o,t))}}}}var s=e?this.aNode.events.concat(this.nativeEvents):this.aNode.events;for(i=0,r=s.length;i<r;i++){var c=s[i],p=e?this:this.owner;c.modifier.native&&(p=p.owner,t=this.scope||p.data),lt(c,p),this._onEl(c.name,h(Re,p,c,0,t),c.modifier.capture)}if(this._toPhase("attached"),this._isInitFromEl)this._isInitFromEl=!1;else{var l=at(this);l&&l.enter&&l.enter(this.el,a)}}function gt(e){Be(e,1,1);for(var t,n,i,r,o=e._elFns.length;o--;){var a=e._elFns[o];t=e.el,n=a[0],i=a[1],r=a[2],t.addEventListener?t.removeEventListener(n,i,r):t.detachEvent("on"+n,i)}e._elFns=null,e.disposeNoDetach&&e.parent||v(e.el),e._toPhase&&e._toPhase("detached"),Me(e)}function yt(e){e.tagName=e.tagName||e.aNode.tagName||"div",E&&e.tagName.indexOf("-")>0&&(e.tagName="div")}function wt(e,t){_e&&tt&&tt.debug&&window.__san_devtool__&&window.__san_devtool__.emit(e,t)}function xt(e){e=e||{},this.lifeCycle=he.start,this.children=[],this._elFns=[],this.listeners={},this.slotChildren=[];var t=this.constructor;this.filters=this.filters||t.filters||{},this.computed=this.computed||t.computed||{},this.messages=this.messages||t.messages||{},this.subTag=e.subTag,Et(t),function(e){var t=[];function n(e,n){var i=t.length;p(t,function(t,r){n&&r===i-1||p(e,function(e){t.hotspot.data[e]=1})})}!function e(i){if(!i.hotspot){if(t.push(i),i.textExpr)i.hotspot={data:{}},n(Tt(i.textExpr));else{var r;for(var o in _e&&i.tagName&&!/^(template|slot|select|input|option)$/i.test(i.tagName)&&(r=f(i.tagName)),i.hotspot={data:{},dynamicProps:[],xProps:[],props:{},sourceNode:r},p(i.vars,function(e){n(Tt(e.expr))}),p(i.props,function(e){n(Tt(e.expr))}),i.directives){n(Tt(i.directives[o].value),"html"!==o)}if(p(i.elses,function(t){e(t)}),p(i.children,function(t){e(t)}),p(i.props,function(e,t){i.hotspot.props[e.name]=t,"id"===e.name?(e.id=!0,i.hotspot.idProp=e,i.hotspot.dynamicProps.push(e)):null!=e.expr.value?r&&xe(i.tagName,e.name).prop(r,e.expr.value,e.name,i):(e.x&&i.hotspot.xProps.push(e),i.hotspot.dynamicProps.push(e))}),"option"===i.tagName&&!ue(i,"value")&&i.children[0]){var a={name:"value",expr:i.children[0].textExpr};i.props.push(a),i.hotspot.dynamicProps.push(a),i.hotspot.props.value=i.props.length-1}}t.pop()}}(e.prototype.aNode)}(t);var n=this,i=t.prototype.aNode;n.givenANode=e.aNode,n.givenNamedSlotBinds=[],n.givenSlots={named:{}},this.owner=e.owner,this.scope=e.scope,this.el=e.el;var r,a,c=e.parent;if(c&&(this.parent=c,this.parentComponent=c.nodeType===le.CMPT?c:c&&c.parentComponent),this.id=o(),this.el){var l=this.el.firstChild;if(3===l.nodeType&&(l=l.nextSibling),l&&8===l.nodeType){var u=l.data.match(/^\s*s-data:([\s\S]+)?$/);if(u){var d=u[1];e.data=new Function("return "+d.replace(/^[\s\n]*/,""))(),l.previousSibling&&v(l.previousSibling),v(l)}}}this.nativeEvents=[],this.givenANode&&(this._createGivenSlots(),p(this.givenANode.events,function(t){t.modifier.native?n.nativeEvents.push(t):(lt(t,e.owner),n.on(t.name,h(Re,e.owner,t,1,e.scope),t))}),this.tagName=i.tagName||n.givenANode.tagName,this.binds=(r=this.givenANode.props,a=[],p(r,function(e){a.push({name:I(e.name),expr:e.expr,x:e.x,raw:e.raw})}),a)),this._toPhase("compiled"),this.data=new Te(s("function"==typeof this.initData&&this.initData()||{},e.data)),yt(this),p(this.binds,function(e){if(J(e),n.scope){var t=ne(e.expr,n.scope,n.owner);void 0!==t&&n.data.set(e.name,t)}});var m=this.dataTypes||t.dataTypes;if(m){var g=function(e,t){return function(n){for(var i in e)if(e.hasOwnProperty(i)){var r=e[i];if("function"!=typeof r)throw new Error("[SAN ERROR] "+t+":"+i+" is invalid; it must be a function, usually from san.DataTypes");r(n,i,t,i)}}}(m,this.subTag||this.name||t.name);this.data.setTypeChecker(g),this.data.checkDataTypes()}for(var y in this.computedDeps={},this.computed)this.computedDeps[y]||this._calcComputed(y);this.dataChanger||(this.dataChanger=h(this._dataChanger,this),this.data.listen(this.dataChanger)),this._toPhase("inited"),this.el&&(Ze(this),this._attached());var w=e.reverseWalker;if(w){var x=w.current;x&&1===x.nodeType&&(this.el=x,w.goNext()),Ze(this),this._attached()}}function Nt(e){if("function"==typeof e)return e;if("object"!=typeof e)throw new Error("[SAN FATAL] param must be a plain object.");function t(e){xt.call(this,e)}return t.prototype=e,c(t,xt),t}function Et(e){var t=e.prototype;if(!t.hasOwnProperty("_cmptReady")){t.components=e.components||t.components||{};var n=t.components;for(var i in n){var r=n[i];"object"==typeof r?n[i]=Nt(r):"self"===r&&(n[i]=e)}t._cmptReady=1}if(!t.hasOwnProperty("aNode")){t.aNode=k();var o=e.template||t.template;if(o){var a=ee(o,{trimWhitespace:t.trimWhitespace||e.trimWhitespace,delimiters:t.delimiters||e.delimiters}),s=a.children[0];if(1!==a.children.length||s.textExpr)throw new Error("[SAN FATAL] template must have a root element.");t.aNode=s,"template"===s.tagName&&(s.tagName=null);for(var c={class:{name:"class",expr:H('{{class | _class | _sep(" ")}}')},style:{name:"style",expr:H('{{style | _style | _sep(";")}}')},id:{name:"id",expr:H("{{id}}")}},p=s.props.length;p--;){var h=s.props[p],l=c[h.name];l&&(s.props.splice(p,1),c[h.name]=h,"id"!==h.name&&(h.expr.segs.push(l.expr.segs[0]),h.expr.value=null))}s.props.push(c.class,c.style,c.id)}}}function Tt(e){var t=[];function n(e){p(e,function(e){t=t.concat(Tt(e))})}switch(e.type){case P.ACCESSOR:var i=e.paths;t.push(i[0].value),i.length>1&&t.push(i[0].value+"."+(i[1].value||"*")),n(i.slice(1));break;case P.UNARY:return Tt(e.expr);case P.TEXT:case P.BINARY:case P.TERTIARY:n(e.segs);break;case P.INTERP:t=Tt(e.expr),p(e.filters,function(e){n(e.name.paths),n(e.args)})}return t}wt.start=function(e){tt=e,wt("san",e)},xt.prototype.getComponentType=function(e){return this.components[e.tagName]},xt.prototype._createGivenSlots=function(){var e=this;e.givenSlots.named={},e.givenANode&&e.scope&&p(e.givenANode.children,function(t){var n,i=!t.textExpr&&ue(t,"slot");if(i){!e.givenSlotInited&&e.givenNamedSlotBinds.push(i);var r=ne(i.expr,e.scope,e.owner);(n=e.givenSlots.named[r])||(n=e.givenSlots.named[r]=[])}else e.givenSlotInited||(n=e.givenSlots.noname)||(n=e.givenSlots.noname=[]);n&&n.push(t)}),e.givenSlotInited=!0},xt.prototype.nodeType=le.CMPT,xt.prototype.nextTick=w,xt.prototype._callHook=xt.prototype._toPhase=function(e){this.lifeCycle[e]||(this.lifeCycle=he[e]||this.lifeCycle,"function"==typeof this[e]&&this[e](),wt("comp-"+e,this))},xt.prototype.on=function(e,t,n){"function"==typeof t&&(this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push({fn:t,declaration:n}))},xt.prototype.un=function(e,t){for(var n=this.listeners[e],i=n&&n.length;i--;)t&&t!==n[i].fn||n.splice(i,1)},xt.prototype.fire=function(e,t){var n=this;p(this.listeners[e],function(e){e.fn.call(n,t)})},xt.prototype._calcComputed=function(e){var t=this.computedDeps[e];t||(t=this.computedDeps[e]={}),this.data.set(e,this.computed[e].call({data:{get:h(function(n){if(!n)throw new Error("[SAN ERROR] call get method in computed need argument");return t[n]||(t[n]=1,this.computed[n]&&this._calcComputed(n),this.watch(n,function(){this._calcComputed(e)})),this.data.get(n)},this)}}))},xt.prototype.dispatch=function(e,t){for(var n=this.parentComponent;n;){var i=n.messages[e]||n.messages["*"];if("function"==typeof i){i.call(n,{target:this,value:t,name:e});break}n=n.parentComponent}},xt.prototype.slot=function(e){var t=[],n=this;return function i(r){p(r,function(r){r.nodeType===le.SLOT&&r.owner===n?(r.isNamed&&r.name===e||!r.isNamed&&!e)&&t.push(r):i(r.children)})}(this.children),t},xt.prototype.ref=function(e){var t,n=this;return function i(r){p(r,function(r){return function(r){if(r.nodeType!==le.TEXT){if(r.owner===n){var o;switch(r.nodeType){case le.ELEM:(o=r.aNode.directives.ref)&&ne(o.value,r.scope,n)===e&&(t=r.el);break;case le.CMPT:(o=r.givenANode.directives.ref)&&ne(o.value,r.scope,n)===e&&(t=r)}!t&&i(r.slotChildren)}!t&&i(r.children)}}(r),!t})}(this.children),t},xt.prototype._update=function(e){if(!this.lifeCycle.disposed){var t=this,n=!1;if(this._notifyNeedReload=function(){n=!0},e)if(p(e,function(e){var i=e.expr;p(t.binds,function(n){var r,o=n.name,a=n.expr;!Ne(e,t,o)&&(r=ce(i,a,t.scope))&&(r>2&&(o=L([{type:P.STRING,value:o}].concat(i.paths.slice(a.paths.length))),a=i),t.data.set(o,ne(a,t.scope,t.owner),{target:{id:t.owner.id}}))}),p(t.givenNamedSlotBinds,function(e){return!(n=n||ce(i,e.expr,t.scope))})}),n)this._createGivenSlots(),this._repaintChildren();else for(var i=this.slotChildren.length;i--;){var r=this.slotChildren[i];r.lifeCycle.disposed?this.slotChildren.splice(i,1):r.isInserted&&r._update(e,1)}var o=this.dataChanges;o&&(this.dataChanges=null,p(this.aNode.hotspot.dynamicProps,function(e){p(o,function(n){if(ce(n.expr,e.expr,t.data)||e.hintExpr&&ce(n.expr,e.hintExpr,t.data))return et(t,ne(e.expr,t.data,t),e),!1})}),Ue(this,o),n&&(this._createGivenSlots(),this._repaintChildren()),this._toPhase("updated"),this.owner&&(this._updateBindxOwner(o),this.owner._update())),this._notifyNeedReload=null}},xt.prototype._updateBindxOwner=function(e){var t=this;this.owner&&p(e,function(e){p(t.binds,function(n){var i=e.expr;if(n.x&&!Ne(e,t.owner)&&ce(i,Y(n.name),t.data)){var r=n.expr;i.paths.length>1&&(r=L(n.expr.paths.concat(i.paths.slice(1)))),t.scope.set(r,ne(i,t.data,t),{target:{id:t.id,prop:n.name}})}})})},xt.prototype._repaintChildren=function(){Be(this,0,1),this.children=[],this._contentReady=0,this.slotChildren=[],rt(this)},xt.prototype._dataChanger=function(e){this.lifeCycle.painting||this.lifeCycle.created?(this.dataChanges||(w(this._update,this),this.dataChanges=[]),this.dataChanges.push(e)):this.lifeCycle.inited&&this.owner&&this._updateBindxOwner([e])},xt.prototype.watch=function(e,t){var n=Y(e);this.data.listen(h(function(e){ce(e.expr,n,this.data)&&t.call(this,ne(n,this.data,this),e)},this))},xt.prototype.dispose=pt,xt.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||(this.slotChildren=null,this.data.unlisten(),this.dataChanger=null,this.dataChanges=null,gt(this,this.disposeNoDetach,this.disposeNoTransition),this.listeners=null,this.givenANode=null,this.givenSlots=null,this.givenNamedSlotBinds=null):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},xt.prototype._attached=mt,xt.prototype.attach=ot,xt.prototype.detach=ct,xt.prototype._create=it,xt.prototype._onEl=ht;var Ct={version:"3.5.7",debug:!0,Component:xt,defineComponent:Nt,compileComponent:Et,parseTemplate:ee,parseExpr:Y,ExprType:P,LifeCycle:he,NodeType:le,nextTick:w,Data:Te,evalExpr:ne,inherits:c,DataTypes:A};e.exports=Ct,wt.start(Ct)}()}).call(this,n(3).setImmediate)},function(e,t,n){"use strict";var i,r=((i=n(4))&&i.__esModule?i:{default:i}).default.defineComponent({template:'\n        <main>\n            <button on-click="add">添加信息</button>\n            <table border="1">\n                <tr>\n                    <th>姓名</th><th>审核状态</th><th>操作</th>\n                </tr>\n                <tr s-for="i,index in person">\n                    <td>{{ i.name }}</td>\n                    <td>{{ i.status | judgeStatus }}</td>\n                    <td>\n                        <button s-if="i.status == 0" on-click="audit(index)">审核</button>\n                        <button s-else on-click="delete(index)">删除</button>\n                    </td>\n                </tr>\n            </table>\n        </main>\n    ',initData:function(){return{person:[]}},add:function(e){this.data.push("person",{name:prompt("请输入添加者姓名"),status:0})},delete:function(e){this.data.removeAt("person",e)},audit:function(e){this.data.set("person["+e+"].status",confirm("是否合格")?1:-1)},filters:{judgeStatus:function(e){return 0==e?"待审核":1==e?"合格":"不合格"}}});window.app=new r,app.attach(document.body)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,